Bootstrap: debootstrap
OSVersion: focal
MirrorURL: http://us.archive.ubuntu.com/ubuntu/

%labels
    AUTHOR AndrePatri (andrepatrics@gmail.com)
    Version v0.0.1

%help
    This is a Singularity container associated with the IBRIDO framework.

#%files # copy isaac kits

%environment
    export DEBIAN_FRONTEND=noninteractive
    export LANG=C.UTF-8
    export LC_ALL=C.UTF-8
    export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/.singularity.d/libs
    export force_color_prompt=Y
    # export SINGULARITY_MEMORY=
    # export SINGULARITY_MEMORY_SWAP=

# %setup
# ./utils/create_ws.sh

%post
    set -e  # Exit immediately if a command exits with a non-zero status
    
    # Set debconf frontend to noninteractive to avoid dialog prompts
    export DEBIAN_FRONTEND=noninteractive

    # Disable starting services
    dpkg-divert --local --rename --add /sbin/initctl
    ln -sf /bin/true /sbin/initctl

    # writing some composite singularity env. variables
    HOME='/root'
    ROS_HOME="${HOME}/.ros"
    ROS_DISTRO=noetic
    MAMBA_ENV_NAME='ibrido'
    MAMBA_EXE_PREFIX='/usr/local/bin'
    MAMBA_EXE='${MAMBA_EXE_PREFIX}/micromamba'
    MAMBA_ROOT_PREFIX='/opt/conda'
    MAMBA_ENV_FPATH='${HOME}/ibrido_files/mamba_env.yml'
    
    PATH=$PATH:${HOME}/.local/bin:${HOME}/ibrido_utils:${HOME}/ibrido_files

    echo "export HOME=\"${HOME}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export ROS_HOME=\"${ROS_HOME}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export ROS_DISTRO=\"${ROS_DISTRO}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_ENV_NAME=\"${MAMBA_ENV_NAME}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_ENV_FPATH=\"${MAMBA_ENV_FPATH}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export PATH=\"${PATH}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_EXE_PREFIX=\"${MAMBA_EXE_PREFIX}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_EXE=\"${MAMBA_EXE}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_ROOT_PREFIX=\"${MAMBA_ROOT_PREFIX}\"" >> $SINGULARITY_ENVIRONMENT

    export CMAKE_PREFIX_PATH=$CONDA_PREFIX:$CMAKE_PREFIX_PATH

    # Configure APT sources
    echo "deb http://us.archive.ubuntu.com/ubuntu/ focal main universe multiverse" > /etc/apt/sources.list
    echo "deb http://us.archive.ubuntu.com/ubuntu/ focal-updates main universe multiverse" >> /etc/apt/sources.list
    echo "deb http://us.archive.ubuntu.com/ubuntu/ focal-security main universe multiverse" >> /etc/apt/sources.list

    # Base packages
    apt-get update && apt-get install -y \
        apt-utils \
        gpg gpgconf \
        ca-certificates python3 python3-venv python-is-python3 \
        git wget sudo vim iputils-ping ssh rsync \
        mlocate \
        libgl1-mesa-glx libglx0 libglew-dev libglfw3 libglfw3-dev mesa-utils\
        libboost-all-dev \
        dirmngr gnupg2 \
        build-essential libc6-dev\
        byobu \
        htop \
        software-properties-common \
        nano \
        cmake \
        cmake-curses-gui \
        curl \
        libyaml-cpp-dev \
        python3-pybind11 \
        gdb valgrind\
        libpugixml-dev \
        swig \
        ffmpeg && rm -rf /var/lib/apt/lists/*
    
    # ROS1 core
    echo 'Etc/UTC' > /etc/timezone && \
    apt-get update && \
    apt-get install -q -y --no-install-recommends tzdata && \
    rm -rf /var/lib/apt/lists/*

    apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

    set -eux; \
       key='C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654'; \
       export GNUPGHOME="$(mktemp -d)"; \
       gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys "$key"; \
       mkdir -p /usr/share/keyrings; \
       gpg --batch --export "$key" > /usr/share/keyrings/ros1-latest-archive-keyring.gpg; \
       gpgconf --kill all; \
       rm -rf "$GNUPGHOME"
    
    echo "deb [signed-by=/usr/share/keyrings/ros1-latest-archive-keyring.gpg] http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros1-latest.list

    apt-get update && apt-get install -y --no-install-recommends \
    ros-noetic-ros-core=1.5.0-1* \
    && rm -rf /var/lib/apt/lists/*

    # ROS1 base
    apt-get update && apt-get install --no-install-recommends -y \
    python3-rosdep \
    python3-rosinstall \
    python3-vcstools \
    && rm -rf /var/lib/apt/lists/*

    rosdep init && \
    rosdep update --rosdistro $ROS_DISTRO

    apt-get update && apt-get install -y --no-install-recommends \
    ros-noetic-ros-base=1.5.0-1* \
    && rm -rf /var/lib/apt/lists/*

    # Additional ROS 1 noetic setup
    apt-get update && apt-get install --no-install-recommends -y \
    ros-$ROS_DISTRO-urdf ros-$ROS_DISTRO-kdl-parser \
    ros-$ROS_DISTRO-eigen-conversions ros-$ROS_DISTRO-robot-state-publisher ros-$ROS_DISTRO-moveit-core \
    ros-$ROS_DISTRO-rviz ros-$ROS_DISTRO-interactive-markers ros-$ROS_DISTRO-tf-conversions ros-$ROS_DISTRO-tf2-eigen \
    python3-rospkg \
    libgazebo11-dev \
    qttools5-dev libqt5charts5-dev qtdeclarative5-dev \
    && rm -rf /var/lib/apt/lists/*

    # Micromamba setup
    curl -Ls https://micromamba.snakepit.net/api/micromamba/linux-64/latest | tar -xvj -C ${MAMBA_EXE_PREFIX}/ --strip-components=1 bin/micromamba
    
    # xbot2 setup
    echo "deb http://xbot.cloud/xbot2/ubuntu/$(lsb_release -sc) /" > /etc/apt/sources.list.d/xbot-latest.list
    wget -q -O - http://xbot.cloud/xbot2/ubuntu/KEY.gpg | apt-key add -
    apt-get update && apt-get install --no-install-recommends -y xbot2_desktop_full \
    && rm -rf /var/lib/apt/lists/*

    # qt creator
    apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -q -y --no-install-recommends qtcreator && rm -rf /var/lib/apt/lists/*

# %test
# echo 'Testing if MicroMamba is present...'
# ${MAMBA_EXE} --version

%runscript
    exec /bin/bash "$@"

%startscript
    exec /bin/bash "$@"
