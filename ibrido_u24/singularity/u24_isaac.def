Bootstrap: docker
From:nvcr.io/nvidia/isaac-sim:5.1.0

%labels
    AUTHOR AndrePatri (andrepatrics@gmail.com)
    Version v1.0.0

%help
    This is the Singularity container associated with the IBRIDO framework.

#%arguments
#    wandb_key=""

%files # copy isaac kits
    ./files/omni.isaac.sim.python.aug_mpc_envs.isaac5.1.headless.kit /isaac-sim/apps/
    ./files/omni.isaac.sim.python.aug_mpc_envs.isaac5.1.kit /isaac-sim/apps

%environment
    
    export DEBIAN_FRONTEND=noninteractive
    export LANG=C.UTF-8
    export LC_ALL=C.UTF-8
    export ROS_DISTRO=jazzy
    export ACCEPT_EULA=Y
    export force_color_prompt=Y
    export WANDB_KEY=""
    export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/.singularity.d/libs
#    export SINGULARITY_MEMORY=
#    export SINGULARITY_MEMORY_SWAP=

#%setup

%post
    # writing some composite singularity env. variables
    HOME='/root'
    MAMBA_ENV_NAME='ibrido'
    MAMBA_ENV_NAME_ISAAC='ibrido_isaac_py11'
    MAMBA_EXE_PREFIX='/usr/local/bin'
    MAMBA_EXE='${MAMBA_EXE_PREFIX}/micromamba'
    MAMBA_ROOT_PREFIX='/opt/conda'
    MAMBA_ENV_FPATH='${HOME}/ibrido_files/mamba_env.yml'
    MAMBA_ENV_FPATH_ISAAC='${HOME}/ibrido_files/mamba_env_isaac_py11.yml'

    PATH=$PATH:${HOME}/.local/bin:${HOME}/ibrido_utils:${HOME}/ibrido_files

    echo "export HOME=\"${HOME}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_ENV_NAME=\"${MAMBA_ENV_NAME}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_ENV_NAME_ISAAC=\"${MAMBA_ENV_NAME_ISAAC}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_ENV_FPATH=\"${MAMBA_ENV_FPATH}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_ENV_FPATH_ISAAC=\"${MAMBA_ENV_FPATH_ISAAC}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export PATH=\"${PATH}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_EXE_PREFIX=\"${MAMBA_EXE_PREFIX}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_EXE=\"${MAMBA_EXE}\"" >> $SINGULARITY_ENVIRONMENT
    echo "export MAMBA_ROOT_PREFIX=\"${MAMBA_ROOT_PREFIX}\"" >> $SINGULARITY_ENVIRONMENT
    
    apt-get update && apt-get install -y --no-install-recommends byobu nano cmake clang cmake-curses-gui curl swig ffmpeg zstd tzdata \
        python3 python3-venv python-is-python3 \
        git wget sudo vim iputils-ping ssh rsync \
        plocate \
        libboost-all-dev \
        mesa-utils \
        build-essential \
        htop \
        nvtop \
        && rm -rf /var/lib/apt/lists/*

    # Micromamba setup
    # ensure decompression tools + file are present
    apt-get update && apt-get install -y --no-install-recommends bzip2 xz-utils gzip file curl && rm -rf /var/lib/apt/lists/*

    # Micromamba setup - robust + properly quoted vars
    MAMB_URL="https://micro.mamba.pm/api/micromamba/linux-64/latest"
    TMPF="/tmp/micromamba.tar"
    MAMBA_EXE_PREFIX="/usr/local/bin"
    MAMBA_EXE="${MAMBA_EXE_PREFIX}/micromamba"
    mkdir -p "${MAMBA_EXE_PREFIX}"

    echo "Downloading micromamba from ${MAMB_URL} to ${TMPF}..."
    curl --fail -sSL "${MAMB_URL}" -o "${TMPF}" || { echo "micromamba download failed"; rm -f "${TMPF}"; exit 1; }

    # check mime-type and attempt extraction with fallbacks
    mime="$(file -b --mime-type "${TMPF}" || true)"
    echo "micromamba file mime-type: ${mime}"

    # Try the common compressions; fall back to tar auto-detect
    case "${mime}" in
        application/x-bzip2|application/x-bz2)
            tar -xjf "${TMPF}" -C "${MAMBA_EXE_PREFIX}" --strip-components=1 "bin/micromamba" || true
            ;;
        application/x-xz)
            tar -xJf "${TMPF}" -C "${MAMBA_EXE_PREFIX}" --strip-components=1 "bin/micromamba" || true
            ;;
        application/gzip)
            tar -xzf "${TMPF}" -C "${MAMBA_EXE_PREFIX}" --strip-components=1 "bin/micromamba" || true
            ;;
        application/x-tar|application/octet-stream)
            tar -xvf "${TMPF}" -C "${MAMBA_EXE_PREFIX}" --strip-components=1 "bin/micromamba" || true
            ;;
        *)
            echo "Unknown archive type (${mime}) â€” attempting extraction with tar auto-detect"
            tar -xvf "${TMPF}" -C "${MAMBA_EXE_PREFIX}" --strip-components=1 "bin/micromamba" || true
            ;;
    esac

    # If micromamba isn't present or not executable, print diagnostic and fail
    if [ ! -x "${MAMBA_EXE}" ]; then
        echo "micromamba missing or not executable at ${MAMBA_EXE}"
        echo "Listing ${MAMBA_EXE_PREFIX}:"
        ls -l "${MAMBA_EXE_PREFIX}" || true
        # Show tar contents as additional debug (this is harmless inside build)
        echo "Tar listing (first 50 lines):"
        tar -tf "${TMPF}" | sed -n '1,50p' || true
        rm -f "${TMPF}"
        exit 1
    fi

    chmod 755 "${MAMBA_EXE}"
    rm -f "${TMPF}"
    
    # ROS 2 base setup
    echo 'Etc/UTC' > /etc/timezone
    apt-get update && DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install -q -y --no-install-recommends tzdata && rm -rf /var/lib/apt/lists/*

    apt-get update && apt-get install -q -y --no-install-recommends \
        dirmngr \
        gnupg2 && rm -rf /var/lib/apt/lists/*

    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

    apt-get update && apt-get install --no-install-recommends -y \
        git \
        python3-rosdep \
        python3-vcstool && rm -rf /var/lib/apt/lists/*

    ROS_DISTRO='jazzy'
    rosdep init && \
      rosdep update --rosdistro $ROS_DISTRO

    apt-get update && apt-get install -y --no-install-recommends \
        ros-jazzy-ros-base \
        ros-jazzy-rviz2 && rm -rf /var/lib/apt/lists/*
    
    # give access to /isaac-sim folder to anybody (root only by default)
    chmod --recursive 777 /isaac-sim

%test
    echo 'Testing if MicroMamba is present...'
    ${MAMBA_EXE} --version
    # echo 'Testing byobu is installed...'
    # which byobu || { echo "byobu missing"; exit 1; }

%runscript
    exec /bin/bash "$@"

%startscript
    exec /bin/bash "$@"
